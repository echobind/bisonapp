### This file was generated by Nexus Schema
### Do not make changes to this file directly

"""
Payload returned if login or signup is successful
"""
type AuthPayload {
  """
  The current JWT token. Use in Authentication header
  """
  token: String

  """
  The logged in user
  """
  user: User
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input EnumRoleNullableListFilter {
  equals: [Role!]
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

type Mutation {
  createUser(data: UserCreateInput!): User!

  """
  Login to an existing account
  """
  login(email: String!, password: String!): AuthPayload

  """
  Signup for an account
  """
  signup(data: SignupInput!): AuthPayload
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

"""
A User Profile
"""
type Profile {
  createdAt: DateTime!
  firstName: String!

  """
  The first and last name of a user
  """
  fullName: String
  id: String!
  lastName: String!
  updatedAt: DateTime!
  user: User!
}

input ProfileCreateOneWithoutUserInput {
  connect: ProfileWhereUniqueInput
  create: ProfileCreateWithoutUserInput
}

input ProfileCreateWithoutUserInput {
  createdAt: DateTime
  firstName: String!
  id: String
  lastName: String!
  updatedAt: DateTime
}

input ProfileWhereInput {
  AND: [ProfileWhereInput!]
  createdAt: DateTimeFilter
  firstName: StringFilter
  id: StringFilter
  lastName: StringFilter
  NOT: [ProfileWhereInput!]
  OR: [ProfileWhereInput!]
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

input ProfileWhereUniqueInput {
  id: String
}

type Query {
  """
  Returns the currently logged in user
  """
  me: User
  user(where: UserWhereUniqueInput!): User
  users(
    after: UserWhereUniqueInput
    before: UserWhereUniqueInput
    first: Int
    last: Int
    orderBy: [UserOrderByInput!]
    where: UserWhereInput
  ): [User!]!
}

enum QueryMode {
  default
  insensitive
}

enum Role {
  ADMIN
  USER
}

input SignupInput {
  email: String!
  password: String!
  profile: ProfileCreateOneWithoutUserInput
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

"""
A User
"""
type User {
  createdAt: DateTime!
  email: String
  id: String!
  profile: Profile
  roles: [Role!]!
  updatedAt: DateTime!
}

input UserCreateInput {
  createdAt: DateTime
  email: String!
  id: String
  password: String!
  profile: ProfileCreateOneWithoutUserInput
  roles: UserCreaterolesInput
  updatedAt: DateTime
}

input UserCreaterolesInput {
  set: [Role!]!
}

input UserOrderByInput {
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  password: SortOrder
  roles: SortOrder
  updatedAt: SortOrder
}

input UserWhereInput {
  AND: [UserWhereInput!]
  createdAt: DateTimeFilter
  email: StringFilter
  id: StringFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  password: StringFilter
  profile: ProfileWhereInput
  roles: EnumRoleNullableListFilter
  updatedAt: DateTimeFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
}
