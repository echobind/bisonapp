---
to: graphql/modules/<%= name %>.ts
---
<% camelized = h.inflection.camelize(name) -%>
<% plural = h.inflection.pluralize(camelized) -%>
import { objectType, inputObjectType, queryField, mutationField, arg, list, nonNull } from 'nexus';

import { isAdmin } from '../../services/permissions';

// <%= camelized %> Type
export const <%= camelized %> = objectType({
  name: '<%= camelized %>',
  description: 'A <%= camelized %>',
  definition(t) {
    t.nonNull.id('id');
    t.nonNull.date('createdAt');
    t.nonNull.date('updatedAt');
    t.nonNull.string('name');
  },
});

// Queries
export const find<%= plural %>Query = queryField('<%= plural.toLowerCase() %>', {
  type: list('<%= camelized %>'),
  authorize: (_root, _args, ctx) => !!ctx.user,
  args: {
    where: arg({ type: '<%= camelized %>WhereInput' }),
    orderBy: arg({ type: '<%= camelized %>OrderByInput', list: true }),
  },
  description: 'Returns found <%= plural.toLowerCase() %>',
  resolve: async (_root, args, ctx) => {
    const { where = {}, orderBy = [] } = args;

    return await ctx.db.<%= name %>.findMany({ where, orderBy });
  }
});

export const findUnique<%= camelized %>Query = queryField('<%= name.toLowerCase() %>', {
  type: '<%= camelized %>',
  description: 'Returns a specific <%= camelized %>',
  authorize: (_root, _args, ctx) => !!ctx.user,
  args: {
    where: nonNull(arg({ type: '<%= camelized%>WhereUniqueInput' }))
  },
  resolve: (_root, args, ctx) => {
    const { where } = args;
    return ctx.prisma.<%= name %>.findUnique({ where })
  },
});

// Mutations
export const create<%= camelized %>Mutation = mutationField('create<%= camelized %>', {
  type: '<%= camelized %>',
  description: 'Creates a <%= camelized %>',
  authorize: (_root, _args, ctx) => isAdmin(ctx.user),
  args: {
    data: nonNull(arg({ type: 'Create<%= camelized %>Input' })),
  },
  resolve: async (_root, args, ctx) => {
    return await ctx.db.<%= name %>.create(args);
  }
});

export const update<%= camelized %>Mutation = mutationField('update<%= camelized %>', {
  type: '<%= camelized %>',
  description: 'Updates a <%= camelized %>',
  authorize: (_root, _args, ctx) => isAdmin(ctx.user),
  args: {
    where: nonNull(arg({ type: '<%= camelized %>WhereUniqueInput'})),
    data: nonNull(arg({ type: 'Update<%= camelized %>Input' })),
  },
  resolve: async (_root, args, ctx) => {
    const { where, data } = args;

    return await ctx.db.<%= name %>.update({ where, data });
  }
});

// MUTATION INPUTS
export const Create<%= camelized %>Input = inputObjectType({
  name: 'Create<%= camelized %>Input',
  description: 'Input used to create a <%= name %>',
  definition: (t) => {
    t.nonNull.string('name');
  },
});

export const Update<%= camelized %>Input = inputObjectType({
  name: 'Update<%= camelized %>Input',
  description: 'Input used to update a <%= name %>',
  definition: (t) => {
    t.nonNull.string('name');
  },
});

// QUERY INPUTS
export const <%= camelized %>OrderByInput = inputObjectType({
  name: '<%= camelized %>OrderByInput',
  description: 'Order <%= camelized.toLowerCase() %> by a specific field',
  definition(t) {
    t.field('name', { type: 'SortOrder' });
  },
});

export const <%= camelized %>WhereUniqueInput = inputObjectType({
  name: '<%= camelized %>WhereUniqueInput',
  description: 'Input to find <%= plural.toLowerCase() %> based on unique fields',
  definition(t) {
    t.id('id');
    // add DB uniq fields here
    // t.string('name');
  },
});

export const <%= camelized %>WhereInput = inputObjectType({
  name: '<%= camelized %>WhereInput',
  description: 'Input to find <%= plural.toLowerCase() %> based on other fields',
  definition(t) {
    t.field('name', { type: 'StringFilter' });
  },
});
